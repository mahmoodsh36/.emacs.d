* packages
** themes
*** zenburn-theme
#+BEGIN_SRC emacs-lisp
(use-package zenburn-theme)
#+END_SRC
*** spacemacs-them
#+BEGIN_SRC emacs-lisp
(use-package spacemacs-theme
  :defer t ;; dont require spacemacs-theme, it doesn't exist
  :init
  (setq spacemacs-theme-comment-italic t)
  (setq spacemacs-theme-keyword-italic t)
  (setq spacemacs-theme-comment-bg nil))
#+END_SRC
*** load the theme
#+BEGIN_SRC emacs-lisp
(load-theme 'spacemacs-dark)
#+END_SRC
** git
*** magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t)
#+END_SRC
** projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :config
  (projectile-mode +1)
  (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+END_SRC
** expand-region
#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :ensure t
  :config
  (require 'expand-region)
  (global-set-key (kbd "C-;") 'er/expand-region))
#+END_SRC
** relative-number
#+BEGIN_SRC emacs-lisp
(use-package linum-relative
  :ensure t
  :config
  (require 'linum-relative)
  (linum-relative-mode))
#+END_SRC
** helm
#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
  :config
  (require 'helm-config)
  (helm-mode 1)
  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "C-x C-b") 'helm-buffers-list)
  (global-set-key (kbd "C-x C-f") 'helm-find-files))
#+END_SRC
** company
#+BEGIN_SRC emacs-lisp
(use-package company
  :config
  (global-company-mode)
  (global-set-key "\C-c\c" 'company-complete))
#+END_SRC
** meghanda
#+BEGIN_SRC emacs-lisp
(use-package meghanada
  :config
  (require 'meghanada)
  (add-hook 'java-mode-hook
            (lambda ()
              ;; meghanada-mode on
              (meghanada-mode t)
              (flycheck-mode +1)
              (setq c-basic-offset 2)
              ;; use code format
              (add-hook 'before-save-hook 'meghanada-code-beautify-before-save)))
  (cond
   ((eq system-type 'windows-nt)
    (setq meghanada-java-path (expand-file-name "bin/java.exe" (getenv "JAVA_HOME")))
    (setq meghanada-maven-path "mvn.cmd"))
   (t
    (setq meghanada-java-path "java")
    (setq meghanada-maven-path "mvn"))))
#+END_SRC
** flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :config
  (add-hook 'after-init-hook #'global-flycheck-mode))
#+END_SRC
** treemacs
#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :config
  (treemacs-resize-icons 7)
  (setq treemacs-width 30)
  (treemacs))
(use-package treemacs-evil
  :after treemacs evil
  :ensure t)
(use-package treemacs-projectile
  :after treemacs projectile
  :ensure t)
#+END_SRC
** powerline
#+BEGIN_SRC emacs-lisp
(use-package powerline
  :config
  (powerline-center-theme))
#+END_SRC
** spaceline
#+BEGIN_SRC emacs-lisp
(use-package spaceline
  :config
  (require 'spaceline-config)
  (spaceline-helm-mode)
  (spaceline-spacemacs-theme))
#+END_SRC
** eyebrowse
#+BEGIN_SRC emacs-lisp
;; (use-package eyebrowse
;;   :config
;;   (eyebrowse-mode t))
#+END_SRC
** lua-mode
#+BEGIN_SRC emacs-lisp
(use-package lua-mode)
#+END_SRC
** evil-mode
#+BEGIN_SRC emacs-lisp
(use-package evil
  :config
  (require 'evil)
  (evil-mode 1))
#+END_SRC
* file-settings
** file-backup
#+BEGIN_SRC emacs-lisp
;; set backup directory
(setq backup-directory-alist '(("" . "~/.emacs.d/backup")))
#+END_SRC
* smooth-scrolling
#+BEGIN_SRC emacs-lisp
(message "scweet scrolling")
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
(setq scroll-step 1) ;; keyboard scroll one line at a time
(setq scroll-conservatively 10000) ;; i think this line fixes the random jumps
(setq auto-window-vscroll nil)
;; keybindings to scroll screen without cursor
(global-set-key "\M-\S-n" "\C-u1\C-v")
(global-set-key "\M-\S-p" "\C-u1\M-v")
#+END_SRC
* visuals
#+BEGIN_SRC emacs-lisp
(message "visuals")
;; show matching parenthases
(show-paren-mode 1)
;; highlight current line
(linum-mode)
;; show line numbers
(global-linum-mode t)
;; screw gui buttons, remove all accessories
(menu-bar-mode -1)
(menu-bar-no-scroll-bar)
(tool-bar-mode -1)
;; fringe minimal mode
(fringe-mode 1)
;; set cursor to not blink
(blink-cursor-mode -1)
;; no startup msg
(setq inhibit-startup-message t)
;; everything to utf-8 plz
(prefer-coding-system 'utf-8)
(set-language-environment "UTF-8")
(set-default-coding-systems 'utf-8)
#+END_SRC
* bindings
#+BEGIN_SRC emacs-lisp
(define-key org-mode-map (kbd "C-c M-l") nil)
;; zap up to char without char
(global-set-key "\M-z" 'zap-up-to-char)
;; kill current buffer without prompt
(global-set-key [(control x) (k)] 'kill-this-buffer)
;; kill window and buffer
(global-set-key "\C-x\S-k" 'kill-buffer-and-window)
;; keybindings to switch between windows
(global-set-key (kbd "C-c M-k") 'windmove-up)
(global-set-key (kbd "C-c M-j") 'windmove-down)
(global-set-key (kbd "C-c M-h") 'windmove-left)
(global-set-key (kbd "C-c M-l") 'windmove-right)
(global-set-key (kbd "C-c l") 'windmove-right)
(global-set-key (kbd "C-c k") 'windmove-up)
(global-set-key (kbd "C-c j") 'windmove-down)
(global-set-key (kbd "C-c h") 'windmove-left)
#+END_SRC
* editing-tweeks
#+BEGIN_SRC emacs-lisp
;; overwrite selection on yanking or whatever
(delete-selection-mode)
;; use only spaces, screw tabs
(setq-default indent-tabs-mode nil)
;; No more typing the whole yes or no. Just y or n will do.
(fset 'yes-or-no-p 'y-or-n-p)
;; start server when emacs loads
(server-start)
#+END_SRC
* general-functions
#+BEGIN_SRC emacs-lisp
;; function that kills all buffers and windows except current one
(defun kill-other-windows ()
      "Kill all other buffers."
      (interactive)
      (mapc 'kill-buffer (delq (current-buffer) (buffer-list)))
      (delete-other-windows))
(put 'erase-buffer 'disabled nil)

(defun kill-other-buffers ()
    "Kill all other buffers."
    (interactive)
    (mapc 'kill-buffer 
          (delq (current-buffer) 
                (remove-if-not 'buffer-file-name (buffer-list)))))
#+END_SRC
* transparency
#+BEGIN_SRC emacs-lisp
;;(set-frame-parameter (selected-frame) 'alpha '(<active> . <inactive>))
;;(set-frame-parameter (selected-frame) 'alpha <both>)
(set-frame-parameter (selected-frame) 'alpha '(85 . 50))
(add-to-list 'default-frame-alist '(alpha . (85 . 50)))

;; (defun toggle-transparency ()
;;   (interactive)
;;   (let ((alpha (frame-parameter nil 'alpha)))
;;     (set-frame-parameter
;;      nil 'alpha
;;      (if (eql (cond ((numberp alpha) alpha)
;;                     ((numberp (cdr alpha)) (cdr alpha))
;;                     ;; Also handle undocumented (<active> <inactive>) form.
;;                     ((numberp (cadr alpha)) (cadr alpha)))
;;               100)
;;          '(85 . 50) '(100 . 100)))))
;; (global-set-key (kbd "C-c t") 'toggle-transparency)
#+END_SRC
* terminal
#+BEGIN_SRC emacs-lisp
(require 'term)

(defun jnm/term-toggle-mode ()
  "Toggles term between line mode and char mode"
  (interactive)
  (if (term-in-line-mode)
      (progn
        (term-char-mode)
        (message "entered char mode"))
    (term-line-mode)
    (message "entered line mode")))

(setq explicit-shell-file-name "/bin/bash")

(defun my-term ()
  "My personal term command."
  (interactive)
  (set-buffer (make-term "terminal" explicit-shell-file-name))
  (switch-to-buffer "*terminal*")
  (term-char-mode)
  (term-mode))

(define-key term-mode-map (kbd "C-c w") 'jnm/term-toggle-mode)
(define-key term-raw-map (kbd "C-c w") 'jnm/term-toggle-mode)

(global-set-key (kbd "C-x t") 'my-term)
#+END_SRC
