super + Return
    st -e tmux

super + x ; {e,w,s,j,k,f,p,m}
    {notify-send "launched emacs" && emacs, \
     firefox & notify-send "launched firefox", \
     notify-send "launched Spotify ðŸŽ¶ðŸŽµ" && spotify, \
     rofi_select_emoji.sh, \
     kill_process.sh, \
     notify-send 'launched vifm' && st -e tmux new-session \; send-keys 'vifm; exit' C-m  \;, \
     st -e zsh -i -c pulsemixer & notify-send 'launched pulsemixer', \
     dir=$(ls ~/music | dmenu -l 15 -i) && st -e tmux new-session \; send-keys 'vifm $dir; exit' C-m \;}

super + x ; {n,I,v,d,t,l,u}
    {st -e zsh -i -c newsboat & notify-send 'launched newsboat', \
     notify-send  -t 60000 "$(xprop | tail -40)", \
     st -e zsh -i -c vim & notify-send 'launched vim', \
     notify-send 'launched diary' && st -e zsh -i -c diary.sh, \
     notify-send 'launched transmission' && export QT_STYLE_OVERRIDE=adwaita-dark && transmission-qt, \
     lock.sh, \
     notify-send 'launched music diary' && st -e zsh -i -c music_diary.sh}

super + e
    toggle_touchpad.sh

super + r
    sh -c "$(ls /usr/bin | dmenu.sh)"
    

super + y ; super + y ; {i}
    notify-send "it works"; sleep 0.1; xdotool type "hey"

# screenshot
super + {_,shift +} p
    file=$(echo ~/data/images/scrots/`date | tr " " "_"`.png) && \
    notif_str="screenshot taken"; {scrot, notif_str="image of selection taken"; sleep 0.2; scrot --select} "$file" && echo -n "$file" | xclip -selection c && notify-send $notif_str

super + g ; {R,r,s,w}
    {ffmpeg -video_size 3286x1080 -framerate 25 -f x11grab -i :0.0 -f pulse -ac 2 -i default "/home/$USER/recording_$(date | tr " " "_").mkv" & notify-send "started recording", \
    ffmpeg -video_size 1920x1080 -framerate 25 -f x11grab -i :0.0 -f pulse -ac 2 -i default "/home/$USER/recording_$(date | tr " " "_").mkv" & notify-send "started recording", \
    pkill ffmpeg && notify-send "stopped recording", \
    notify-send "started recording from webcam" && ffmpeg -f v4l2 -video_size 1280x720 -i /dev/video0 -f pulse -i default -c:v libx264 -preset ultrafast -c:a aac "$HOME/recording_$(date | tr " " "_").mkv"}

super + a ; {s,w,c,n,d,o}
    {kill -s USR1 `pgrep sxhkd` && notify-send "restarted sxhkd", \
     feh --bg-scale ~/.cache/wallpaper && notify-send "reset wallpaper", \
     pkill compton; compton & notify-send "restarted compton", \
     notify-send 'restarted NetworkManager'; sudo systemctl restart NetworkManager, \
     pkill dwm_statusbar.s && notify-send "restarted statusbar" && dwm_statusbar.sh, \
     pkill dunst && notify-send 'restarted dunst' && dunst}

super + ctrl + space
    notify-send "switched layout to $(switch_layout.sh)"

super + alt + {j,k}
     pactl set-sink-volume @DEFAULT_SINK@ {-3%, +3%};\
         dwm_statusbar_update.sh; show_volume.sh
super + alt + shift + {j,k}
     pactl set-sink-volume @DEFAULT_SINK@ {0%, 100%};\
         dwm_statusbar_update.sh; show_volume.sh

super + s; {l,h,s}
    playerctl {next,previous,play-pause}
super + s; {w}
    {spotify_lyrics.sh}

super + v
    sleep 0.1; xdotool type $(xclip -selection c -o)

#super + shift + button3
#    dzen_launcher.sh
#
#super + c
#    pkill dzen2

super + w; {g, i, y}
    term=$(rofi -dmenu -lines 0 -p search);\
    [ ! -z "$term" ] && firefox {"google.com/search?q=$term",\
                                 "imdb.com/find?q=$term",\
                                 "youtube.com/results?search_query=$term"}

# bspwm keys start here ====================================================================================

# Close window
super + q
	bspc node --close

# Navigate layouts
#super + {_,shift + }space
#    bspc desktop --layout {next,prev}
super + space
    bspc desktop ---layout next

# Rotate desktop
super + {_,shift + }r
	bspc node @/ --rotate {90,-90}

# Circulate the leaves of the tree
super + {_,shift + }c
	bspc node @/ --circulate {backward,forward}

# Make split ratios equal
super + equal
	bspc node @/ --equalize

# Make split ratios balanced
super + minus
	bspc node @/ --balance

# Toogle tiling of window
super + shift + space
	bspc query --nodes -n focused.tiled && state=floating || state=tiled; \
	bspc node --state \~$state

# Toogle pseudo tiling of window
super + p
	bspc node --state \~pseudo_tiled

# Toggle fullscreen of window
super + f
	bspc node --state \~fullscreen

# Focus next/previous window
super + {_,shift} + Tab
	bspc node --focus {prev,next}

# Navigate to older/newer window in history
super + {o,n}
	bspc wm --record-history off; \
	bspc node --focus {older,newer}; \
	bspc wm --record-history on

# Focus/move window to the biggest space
super + {_,shift + }m
	bspc node --{focus,swap} biggest

# Focus/swap windows by direction
super + {_,shift + }{h,j,k,l}
	bspc node --{focus,swap} {west,south,north,east}

# Swap window with last window
super + apostrophe
	bspc node --swap last

# Move window to last split
super + y
	bspc query --nodes -n focused.automatic \
	&& bspc node -n last.\!automatic \
	|| bspc node last.leaf -n focused

# Flip layout vertically/horizontally
#super + {_,shift + }s
#    bspc node @/ --flip {vertical,horizontal}

# Focus parent/brother/first/second for preselection
super + ctrl + {p,b,comma,period}
	bspc node --focus @{parent,brother,first,second}

# Preselect the splitting area for next window on leaf/parent
super + ctrl + {h,j,k,l}
	bspc node --presel-dir \~{west,south,north,east}

# Define splitting ratio for next window on leaf/parent
super + ctrl + {_,shift +}{1-9}
	bspc node {_,@/} --presel-ratio 0.{1-9}

# Cancel preselection
super + ctrl + space
	bspc node --presel-dir cancel

# Expand tiled space
super + alt + {h,j,k,l}
    bspc node {@west -r -10,@south -r +10,@north -r -10,@east -r +10}

# Contract tiled space
super + alt + shift + {h,j,k,l}
    bspc node {@east -r -10,@north -r +10,@south -r -10,@west -r +10}

# Move window to selected desktop
super + shift + {1-9,0}
    bspc node --to-desktop ^{1-9,10} --focus

# Move window to left/right desktop
super + shift + {Left,Right}
    bspc node --to-desktop {prev,next} --focus

# Move window to left/right desktop
ctrl + alt + shift + {Left,Right}
    bspc node --to-desktop {prev,next} --focus

# Focus selected desktop
super + {1-9,0}
    bspc desktop --focus ^{1-9,10}

# Increase/decrease window gap on focused desktop
super + bracket{left,right}
	bspc config -d focused window_gap $((`bspc config -d focused window_gap` {-,+} 5 ))

# Focus when clicking
~button1
	bspc pointer --grab focus

# Move/resize windows
alt + button{1-3}
	; bspc pointer --grab {move,resize_side,resize_corner}

# Ungrab when releasing a mouse button
alt + @button{1-3}
	bspc pointer --ungrab

# Emulate i3's scratchpad
super + ctrl + s
    xdotool search --onlyvisible --classname scratchpad windowunmap \
	|| ( xdotool search --classname scratchpad windowmap; xdotool search --classname scratchpad windowraise; ) \
	|| ( urxvtc -name scratchpad -geometry 220x20+400+0; xdotool search --classname scratchpad windowraise; )

super + alt + s
    pgrep dzen2_status && pkill dzen2 || dzen2_statusbar.sh
